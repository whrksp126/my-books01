데모 사이트 주소 :my-books.vercel.app
이메일 주소 :mark@test.com
비밀번호 :fastcampus

npx create-react-app my-books --template typescript

라우팅 설정 npm i react-router-dom
npm i --save-dev @types/react-router-dom

app.tsx에서 라이팅 설정을 한다
[경로를 설정하는 듯]

ex)----------------------------
로그인
               연결할 주소    연결할 컴포넌트 이름
<Route exact path="/signin" component={Signin} />
------------------------------

npm i react-error-boundary
componentDidCatch 를 이용해서 error 가 발생하게 되면 
error 페이지로 fallback 시켜주는 기능을 가지고 있음

==================================
로그인과 로그아웃처리 

로그인 api는 비동기 로직이기 때문에 그에 맞게 리덕스를 설정한다

npm i redux react-redux redux-saga redux-devtools-extension redux-actions

설치한 패키지 중에서 타입 데피니션이 내장되지 않은 패키지가 있기 때문에 그것들만 @types로 설치해준다
npm i @types/react-redux @types/redux-actions -D

이제 본격적으로 리덕스를 세팅해보자
src 안에 redux 폴더를 만들고
redux안에 modules 폴더를 만든다
modules 폴더 안에는 auth.ts (인증을 관리), reducer.ts (루트리듀서를 만들기 위해)
rootSaga.ts (rootSaga를 정의해둠)
redux 폴더 안에는 creacte.ts (스토리를 만들기 위해)

store설정 끝


-------------------------------------
signin 화면을 만들기 위해 디자인 라이브러리를 가져온다

npm i antd
npm i @antd-design/icons

-------------------------
레이아웃 구성이 끝나면
작업한 ul 에 uncontrolled component 로 input 두개를 ref 삼고
해당 ref 에서 값을 꺼낸 다음 signin botton 을 클릭하면 
login api 를 칠수 있도록 한다

login 을 요청하기 위해서 container 에서 login 이라고 하는
porps 로 함수를 찔러 넣고 이 component에서 그 login 함수를
호출 하도록 하겠습니다

------------------------
signin container 에서 login 이라고 하는 함수를 만들어서
signin component 로 넣어주도록 함

-------------------------------

api 를 호출하는 코드를 추상화 해서 적어둘 것입니다.
api 는 axios 로 칠 것 이기 때문에

npm i axios

----
기존에 login 되어 있는 token value 을 보내서 
ueser api url에 delete 를 해야함

---------------
api 를 호출해서 redux store 에 token 으로 저장하는거 말고
브라우저 로컬 스토리지에 저장하는거 까지 처리하겠습니다.

--------------------------
push 처리를 하기 위해서 npm i connected-react-router